var S=Object.defineProperty,d=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var m=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var f=(r,e,t)=>e in r?S(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,c=(r,e)=>{for(var t in e||(e={}))h.call(e,t)&&f(r,t,e[t]);if(m)for(var t of m(e))x.call(e,t)&&f(r,t,e[t]);return r},u=(r,e)=>d(r,p(e));import{E as n,a5 as l}from"./vendor.b8b0b9ef.js";import{s as N}from"./projection.4e77876b.js";import{u as i,f as O,P as y,N as J,s as b,v,y as P,B as g,c as B}from"./dataUtils.d43e0c71.js";import{x as w,d as z,f as k,L as D}from"./utils.1464487c.js";import"./LercCodec.5da91dd1.js";import"./colorUtils.c7035b36.js";class I{convertVectorFieldData(e){const t=i.fromJSON(e.pixelBlock),s=O(t,e.type);return Promise.resolve(n(s)&&s.toJSON())}async decode(e){const t=await y(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=i.fromJSON(e.pixelBlock),e.extent=e.extent?l.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(n(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=J.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(i.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(n(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=b(i.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=v(i.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,o)=>{t.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(a=>a?new i(a):null),s=P(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo});if(!e.coefs)return s&&s.toJSON();const o=g(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return o&&o.toJSON()}async createStreamlinesMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:a}=await B(e.rendererSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:a.buffer},transferList:[o.buffer,a.buffer]}}async getProjectionOffsetGrid(e){const t=l.fromJSON(e.projectedExtent),s=l.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationStemps&&(o=new N({steps:e.datumTransformationStemps})),w(t.spatialReference,s.spatialReference,o)&&await z();const a=e.rasterTransform?k(e.rasterTransform):null;return D(u(c({},e),{projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:a}))}}export{I as default};
