var h=Object.defineProperty,I=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var y=Object.getOwnPropertySymbols;var v=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var m=(e,r,t)=>r in e?h(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,u=(e,r)=>{for(var t in r||(r={}))v.call(r,t)&&m(e,t,r[t]);if(y)for(var t of y(r))w.call(r,t)&&m(e,t,r[t]);return e},p=(e,r)=>I(e,g(r));import{b8 as f,D as T}from"./vendor.b8b0b9ef.js";import{a as M}from"./lazyLayerLoader.0b598025.js";import{m as P,h as i,f as b,n as c}from"./layersLoader.715a6ba9.js";function d(e,r){return!!e.typeKeywords&&e.typeKeywords.indexOf(r)>-1}function j(e){return!e.portalItem||e.portalItem instanceof f||(e=p(u({},e),{portalItem:new f(e.portalItem)})),O(e.portalItem).then(r=>{const t=u({portalItem:e.portalItem},r.properties),n=r.constructor;return Promise.resolve(new n(t))})}function O(e){return e.load().then(L).then(C)}function L(e){switch(e.type){case"Map Service":return F(e);case"Feature Service":return K(e);case"Feature Collection":return x(e);case"Scene Service":return $(e);case"Image Service":return D(e);case"Stream Service":return G();case"Vector Tile Service":return W();case"KML":return A();case"WFS":return B();case"WMTS":return _();case"WMS":return V();case"Feed":return k();default:return Promise.reject(new T("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type}))}}function C(e){return(0,M[e.className])().then(r=>({constructor:r,properties:e.properties}))}function F(e){return R(e).then(r=>r?{className:"TileLayer"}:{className:"MapImageLayer"})}function K(e){return S(e).then(r=>{if(typeof r=="object"){const t={};return r.id!=null&&(t.layerId=r.id),{className:"FeatureLayer",properties:t}}return{className:"GroupLayer"}})}function $(e){return S(e).then(r=>{if(typeof r=="object"){const t={};let n;if(r.id!=null?(t.layerId=r.id,n=`${e.url}/layers/${r.id}`):n=e.url,Array.isArray(e.typeKeywords)&&e.typeKeywords.length>0){const a={IntegratedMesh:"IntegratedMeshLayer","3DObject":"SceneLayer",Point:"SceneLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};for(const o of Object.keys(a))if(e.typeKeywords.indexOf(o)!==-1)return{className:a[o]}}return c(n).then(a=>{let o="SceneLayer";const s={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};return a&&a.layerType&&s[a.layerType]&&(o=s[a.layerType]),{className:o,properties:t}})}return r===!1?c(e.url).then(t=>(t==null?void 0:t.layerType)==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}):{className:"GroupLayer"}})}async function x(e){if(await e.load(),d(e,"Map Notes"))return{className:"MapNotesLayer"};if(d(e,"Route Layer"))return{className:"RouteLayer"};const r=await e.fetchData();return i(r)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function D(e){var r,t,n;await e.load();const a=(r=(t=e.typeKeywords)==null?void 0:t.map(N=>N.toLowerCase()))!=null?r:[];if(a.indexOf("elevation 3d layer")>-1)return{className:"ElevationLayer"};if(a.indexOf("tiled imagery")>-1)return{className:"ImageryTileLayer"};const o=await e.fetchData(),s=o==null?void 0:o.layerType;return s==="ArcGISTiledImageServiceLayer"?{className:"ImageryTileLayer"}:s==="ArcGISImageServiceLayer"?{className:"ImageryLayer"}:((n=(await c(e.url)).cacheType)==null?void 0:n.toLowerCase())==="map"?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function G(){return{className:"StreamLayer"}}function W(){return{className:"VectorTileLayer"}}function A(){return{className:"KMLLayer"}}function B(){return{className:"WFSLayer"}}function V(){return{className:"WMSLayer"}}function _(){return{className:"WMTSLayer"}}function k(){return{className:"StreamLayer"}}function R(e){return c(e.url).then(r=>r.tileInfo)}function S(e){return!e.url||e.url.match(/\/\d+$/)?Promise.resolve({}):e.load().then(()=>e.fetchData()).then(async r=>e.type==="Feature Service"?l(r=await P(r,e.url)):i(r)>0?l(r):c(e.url).then(l))}function l(e){return i(e)===1&&{id:b(e)}}var H=Object.freeze(Object.defineProperty({__proto__:null,fromItem:j,selectLayerClassPath:L},Symbol.toStringTag,{value:"Module"}));export{L as i,H as p,d as t};
