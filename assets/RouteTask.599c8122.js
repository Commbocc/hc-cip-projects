var v=Object.defineProperty,N=Object.defineProperties;var w=Object.getOwnPropertyDescriptors;var B=Object.getOwnPropertySymbols;var R=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var b=(r,e,t)=>e in r?v(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,p=(r,e)=>{for(var t in e||(e={}))R.call(e,t)&&b(r,t,e[t]);if(B)for(var t of B(e))k.call(e,t)&&b(r,t,e[t]);return r},f=(r,e)=>N(r,w(e));import{N as S,_ as T,a0 as j}from"./vendor.b8b0b9ef.js";import{u as c,d as q,b as x,p as P,f as C,o as E}from"./networkService.50c5d234.js";import{v as K}from"./normalizeUtils.7353462f.js";import{o as M}from"./utils.931ca8bb.js";import{l as Q}from"./Task.b8d888f6.js";import"./GPMessage.9d5ad170.js";const V=E({accumulateAttributes:{name:"accumulateAttributeNames"},attributeParameterValues:!0,directionsTimeAttribute:{name:"directionsTimeAttributeName"},impedanceAttribute:{name:"impedanceAttributeName"},outSpatialReference:{name:"outSR",getter:r=>r.outSpatialReference.wkid},pointBarriers:{name:"barriers"},polylineBarriers:!0,polygonBarriers:!0,restrictionAttributes:{name:"restrictionAttributeNames"},stops:!0,travelMode:!0});async function W(r,e,t){const m=[],i=[],a={},o={},y=M(r),{path:n}=y;e.stops&&e.stops.features&&c(e.stops.features,i,"stops.features",a),e.pointBarriers&&e.pointBarriers.features&&c(e.pointBarriers.features,i,"pointBarriers.features",a),e.polylineBarriers&&e.polylineBarriers.features&&c(e.polylineBarriers.features,i,"polylineBarriers.features",a),e.polygonBarriers&&e.polygonBarriers.features&&c(e.polygonBarriers.features,i,"polygonBarriers.features",a);const d=await K(i);for(const s in a){const u=a[s];m.push(s),o[s]=d.slice(u[0],u[1])}if(q(o,m)){let s=null;try{s=await x(n,e.apiKey,t)}catch{}s&&!s.hasZ&&P(o,m)}for(const s in o)o[s].forEach((u,$)=>{e.get(s)[$].geometry=u});const g=f(p({},t),{query:f(p(p({},y.query),V.toQueryParams(e)),{f:"json"})}),A=n.endsWith("/solve")?n:`${n}/solve`,h=await S(A,g);return C(h)}let l=class extends Q{constructor(r){super(r)}solve(r,e){return W(this.url,r,e)}};l=T([j("esri.tasks.RouteTask")],l);const I=l;export{I as default};
