var N=Object.defineProperty,D=Object.defineProperties;var J=Object.getOwnPropertyDescriptors;var S=Object.getOwnPropertySymbols;var M=Object.prototype.hasOwnProperty,F=Object.prototype.propertyIsEnumerable;var x=(e,t,r)=>t in e?N(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,h=(e,t)=>{for(var r in t||(t={}))M.call(t,r)&&x(e,r,t[r]);if(S)for(var r of S(t))F.call(t,r)&&x(e,r,t[r]);return e},g=(e,t)=>D(e,J(t));import{bP as E,ar as T,E as P,_ as i,$ as o,g3 as j,a0 as I,eS as U,fn as q,eT as R,bF as V,bG as k,bH as A,bI as _,eV as z,f5 as C,fl as K,bN as G,bK as H,fU as O,D as L,N as v,bR as W,a5 as B,a6 as Q,bz as X,bv as Y,ao as Z,bM as ee}from"./vendor.b8b0b9ef.js";import{n as te}from"./loadAll.52e105c3.js";import{r as re}from"./scaleUtils.a187d8e1.js";import{n as se,f as ie,y as ae,e as w,K as oe}from"./SublayersOwner.6692413e.js";import{n as $,l as ne}from"./floorFilterUtils.1acb5b5d.js";import"./Version.edd17048.js";import"./CollectionFlattener.8d95190f.js";const le={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let m=class extends E(T){constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map(t=>{const r=$(this.floors,t);return t.toExportImageJSON(r)});return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&se(this.visibleSublayers,this.layer.serviceSublayers,this.layer)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.handles.remove("layer"),e&&this.handles.add([e.allSublayers.on("change",()=>this.notifyChange("visibleSublayers")),e.on("sublayer-update",t=>this.notifyChange(le[t.propertyName]))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map(t=>t.id).join(","):"show:-1":null}get layerDefs(){var e;const t=!((e=this.floors)==null||!e.length),r=this.visibleSublayers.filter(s=>s.definitionExpression!=null||t&&s.floorInfo!=null);return r.length?JSON.stringify(r.reduce((s,a)=>{const n=$(this.floors,a),p=P(n)?ne(n,a):a.definitionExpression;return s[a.id]=p,s},{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers"),this.commitProperty("timeExtent");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const t=this.layer.sublayers,r=a=>{const n=this.scale,p=n===0,u=a.minScale===0||n<=a.minScale,d=a.maxScale===0||n>=a.maxScale;a.visible&&(p||u&&d)&&(a.sublayers?a.sublayers.forEach(r):e.unshift(a))};t&&t.forEach(r);const s=this._get("visibleSublayers");return!s||s.length!==e.length||s.some((a,n)=>e[n]!==a)?e:s}toJSON(){const e=this.layer;let t={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?t.dynamicLayers=this.dynamicLayers:t=g(h({},t),{layers:this.layers,layerDefs:this.layerDefs}),t}};i([o({readOnly:!0})],m.prototype,"dynamicLayers",null),i([o()],m.prototype,"floors",void 0),i([o({readOnly:!0})],m.prototype,"hasDynamicLayers",null),i([o()],m.prototype,"layer",null),i([o({readOnly:!0})],m.prototype,"layers",null),i([o({readOnly:!0})],m.prototype,"layerDefs",null),i([o({type:Number})],m.prototype,"scale",void 0),i([o(j)],m.prototype,"timeExtent",void 0),i([o({readOnly:!0})],m.prototype,"version",null),i([o({readOnly:!0})],m.prototype,"visibleSublayers",null),m=i([I("esri.layers.mixins.ExportImageParameters")],m);let l=class extends U(q(R(ie(ae(V(k(A(_(z(C(K(E(G))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return typeof e=="string"?h({url:e},t):e}load(e){const t=P(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(H).then(()=>this._fetchService(t))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,t,r,s){if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:y})=>y&&y.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const y=O(s.origin);if(y===3){const c=this.createSublayersForOrigin("service").sublayers;n=w(a,c,2)}else if(y>3){const c=this.createSublayersForOrigin("portal-item");n=w(a,c.sublayers,O(c.origin))}}const p=[],u=h({writeSublayerStructure:n},s);let d=n;a.forEach(y=>{const c=y.write({},u);p.push(c),d=d||y.originOf("visible")==="user"}),p.some(y=>Object.keys(y).length>1)&&(t.layers=p),d&&(t.visibleLayers=a.filter(y=>y.visible).map(y=>y.id))}createExportImageParameters(e,t,r,s){const a=s&&s.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new m({layer:this,floors:s==null?void 0:s.floors,scale:re({extent:e,width:t})*a}),p=n.toJSON();n.destroy();const u=!s||!s.rotation||this.version<10.3?{}:{rotation:-s.rotation},d=e&&e.spatialReference,y=d.wkid||JSON.stringify(d.toJSON());p.dpi*=a;const c={};if(s!=null&&s.timeExtent){const{start:b,end:f}=s.timeExtent.toJSON();c.time=b&&f&&b===f?""+b:`${b==null?"null":b},${f==null?"null":f}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return h(h(h({bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:t+","+r},p),u),c)}async fetchImage(e,t,r,s){var a;const n={responseType:"image",signal:(a=s==null?void 0:s.signal)!=null?a:null,query:g(h(h(g(h(h({},this.parsedUrl.query),this.createExportImageParameters(e,t,r,s)),{f:"image"}),this.refreshParameters),this.customParameters),{token:this.apiKey})},p=this.parsedUrl.path+"/export";return n.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers?Promise.reject(new L("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query})):v(p,n).then(u=>u.data).catch(u=>{throw W(u)?u:new L("mapimagelayer:image-fetch-error",`Unable to load image: ${p}`,{error:u})})}async fetchRecomputedExtents(e={}){const t=g(h({},e),{query:g(h({returnUpdates:!0,f:"json"},this.customParameters),{token:this.apiKey})}),{data:r}=await v(this.url,t),{extent:s,fullExtent:a,timeExtent:n}=r,p=s||a;return{fullExtent:p&&B.fromJSON(p),timeExtent:n&&Q.fromJSON({start:n[0],end:n[1]})}}loadAll(){return te(this,e=>{e(this.allSublayers)})}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await v(this.parsedUrl.path,{query:g(h(h({f:"json"},this.parsedUrl.query),this.customParameters),{token:this.apiKey}),signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};i([o({type:Boolean})],l.prototype,"datesInUnknownTimezone",void 0),i([o()],l.prototype,"dpi",void 0),i([o()],l.prototype,"gdbVersion",void 0),i([o()],l.prototype,"imageFormat",void 0),i([X("imageFormat",["supportedImageFormatTypes"])],l.prototype,"readImageFormat",null),i([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],l.prototype,"imageMaxHeight",void 0),i([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],l.prototype,"imageMaxWidth",void 0),i([o()],l.prototype,"imageTransparency",void 0),i([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],l.prototype,"isReference",void 0),i([o({json:{read:!1,write:!1}})],l.prototype,"labelsVisible",void 0),i([o({type:["ArcGISMapServiceLayer"]})],l.prototype,"operationalLayerType",void 0),i([o({json:{read:!1,write:!1}})],l.prototype,"popupEnabled",void 0),i([o()],l.prototype,"sourceJSON",void 0),i([o({json:{write:{ignoreOrigin:!0}}})],l.prototype,"sublayers",void 0),i([Y("sublayers",{layers:{type:[oe]},visibleLayers:{type:[Z]}})],l.prototype,"writeSublayers",null),i([o({type:["show","hide","hide-children"]})],l.prototype,"listMode",void 0),i([o({json:{read:!1},readOnly:!0,value:"map-image"})],l.prototype,"type",void 0),i([o(ee)],l.prototype,"url",void 0),l=i([I("esri.layers.MapImageLayer")],l);const be=l;export{be as default};
